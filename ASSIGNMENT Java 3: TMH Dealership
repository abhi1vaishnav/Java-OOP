//Name: Abhi Vaishnav
//Date: November 10, 2020
//Purpose: To instantiate and sell different cars at a car dealership. These cars can be either Toyota, Honda or Mitsubishi. It then displays all of a certain company's cars at the dealership including the warranty, location, model, trim, colour and price

import java.util.Scanner;
import java.util.InputMismatchException;
import java.text.NumberFormat;

class Main {
  public static void main(String[] args) {
    NumberFormat money = NumberFormat.getCurrencyInstance();
    Scanner input = new Scanner(System.in);
    //variables
    int choice = 0, toyota, mitsubishi, honda;

    //greet the user to the program
    System.out.println("\n__________WELCOME TO THE TMH DEALERSHIP PORTAL___________\n");
    
    //get the number of toyota cars at the dealership
    while (true){ 
      System.out.print("\nEnter the number of Toyota cars at the dealership: ");
      try{
        toyota = input.nextInt();
        break;
      }
      //catching String exceptions
      catch (InputMismatchException e){
        System.out.println("\nBad data type!");
        System.out.println("\nPlease try again!");
        String flush = input.next();
      }
    }

    //get the number of mitsubishi cars at the dealership
    while (true){ 
      System.out.print("\nEnter the number of Mitsubishi cars at the dealership: ");
      try{
        mitsubishi = input.nextInt();
        break;
      }
      //catching String exceptions
      catch (InputMismatchException e){
        System.out.println("\nBad data type!");
        System.out.println("\nPlease try again!");
        String flush = input.next();
      }
    }

    //get the number of honda cars at the dealership
    while (true){ 
      System.out.print("\nEnter the number of honda cars at the dealership: ");
      try{
        honda = input.nextInt();
        break;
      }
      //catching String exceptions
      catch (InputMismatchException e){
        System.out.println("\nBad data type!");
        System.out.println("\nPlease try again!");
        String flush = input.next();
      }
    }

    //create an array of objects for each of the 3 companies the size that the user specified
    Toyota t[] = new Toyota[toyota];
    Mitsubishi m[] = new Mitsubishi[mitsubishi];
    Honda h[] = new Honda[honda];

    //initialize each of the objects in the array of objects based on the company
    for (int i = 0; i < toyota; i ++){

      t[i] = new Toyota();
      //get the warranty
      while (true){ 
        System.out.print("\nEnter the warranty of Toyota #" + (i+1) + " (years): ");
        try{
          t[i].setWarranty(input.nextInt());
          break;
        }
        //catching String exceptions
        catch (InputMismatchException e){
          System.out.println("\nBad data type!");
          System.out.println("\nPlease try again!");
          String flush = input.next();
        }
      }

      //get the price of the toyota
      while (true){ 
        System.out.print("\nEnter the price of Toyota #" + (i+1) + ":$");
        try{
          t[i].setPrice(input.nextDouble());
          break;
        }
        //try, catch to catch a String value entered for an int
        catch (InputMismatchException e){
          System.out.println("\nBad data type!");
          System.out.println("\nPlease try again!");
          String flush = input.next();
        }
      }

      //get the model name of the toyota
      System.out.print("\nEnter the model of Toyota #" + (i+1) + ": ");
      t[i].setModel(input.next());

      //get the colour of the toyota
      System.out.print("\nEnter the colour of Toyota #" + (i+1) + ": ");
      t[i].setColour(input.next());

      //get the trim
      System.out.print("\nEnter the trim of Toyota #" + (i+1) + "(lower, middle, upper): ");
      t[i].setTrim(input.next());

      //error checking
      while (!t[i].getTrim().equalsIgnoreCase("lower") && !t[i].getTrim().equalsIgnoreCase("middle") && !t[i].getTrim().equalsIgnoreCase("upper")){  
        //get the trim level
        System.out.print("Invalid Input!\nEnter the trim of Toyota #" + (i+1) + "(lower, middle, upper): ");
        t[i].setTrim(input.next());
      }

    }


    //initialize each of the objects in the array of objects based on the company
    for (int i = 0; i < mitsubishi; i ++){
      m[i] = new Mitsubishi();
      //get the warranty
      while (true){ 
        System.out.print("\nEnter the warranty of Mitsubishi #" + (i+1) + " (years): ");
        try{
          m[i].setWarranty(input.nextInt());
          break;
        }
        //catching String exceptions
        catch (InputMismatchException e){
          System.out.println("\nBad data type!");
          System.out.println("\nPlease try again!");
          String flush = input.next();
        }
      }

      //get the price
      while (true){ 
        System.out.print("\nEnter the price of Mitsubishi #" + (i+1) + ":$");
        try{
          m[i].setPrice(input.nextDouble());
          break;
        }
        //try, catch to catch a String value entered for an int
        catch (InputMismatchException e){
          System.out.println("\nBad data type!");
          System.out.println("\nPlease try again!");
          String flush = input.next();
        }
      }

      //get the model name
      System.out.print("\nEnter the model of Mitsubishi #" + (i+1) + ": ");
      m[i].setModel(input.next());

      //get the colour
      System.out.print("\nEnter the colour of Mitsubishi #" + (i+1) + ": ");
      m[i].setColour(input.next());

      //get the trim
      System.out.print("\nEnter the trim of Mitsubishi #" + (i+1) + "(lower, middle, upper): ");
      m[i].setTrim(input.next());

      //error checking
      while (!m[i].getTrim().equalsIgnoreCase("lower") && !m[i].getTrim().equalsIgnoreCase("middle") && !m[i].getTrim().equalsIgnoreCase("upper")){  
        //get the trim level
        System.out.print("Invalid Input!\nEnter the trim of Mitsubishi #" + (i+1) + "(lower, middle, upper): ");
        m[i].setTrim(input.next());
      }

    }

    //initialize each of the objects in the array of objects based on the company
    for (int i = 0; i < honda; i ++){
      h[i] = new Honda();
      //get the warranty
      while (true){ 
        System.out.print("\nEnter the warranty of Honda #" + (i+1) + " (years): ");
        try{
          h[i].setWarranty(input.nextInt());
          break;
        }
        //catching String exceptions
        catch (InputMismatchException e){
          System.out.println("\nBad data type!");
          System.out.println("\nPlease try again!");
          String flush = input.next();
        }
      }

      //get the price
      while (true){ 
        System.out.print("\nEnter the price of Honda #" + (i+1) + ":$");
        try{
          h[i].setPrice(input.nextDouble());
          break;
        }
        //try, catch to catch a String value entered for an int
        catch (InputMismatchException e){
          System.out.println("\nBad data type!");
          System.out.println("\nPlease try again!");
          String flush = input.next();
        }
      }

      //get the model name
      System.out.print("\nEnter the model of Honda #" + (i+1) + ": ");
      h[i].setModel(input.next());

      //get the colour
      System.out.print("\nEnter the colour of Honda #" + (i+1) + ": ");
      h[i].setColour(input.next());

      //get the trim
      System.out.print("\nEnter the trim of Honda #" + (i+1) + "(lower, middle, upper): ");
      h[i].setTrim(input.next());

      //error checking
      while (!h[i].getTrim().equalsIgnoreCase("lower") && !h[i].getTrim().equalsIgnoreCase("middle") && !h[i].getTrim().equalsIgnoreCase("upper")){  
        //get the trim level
        System.out.print("Invalid Input!\nEnter the trim of Honda #" + (i+1) + "(lower, middle, upper): ");
        h[i].setTrim(input.next());
      }

    }

    //loop allows user to view cars until they exit
    do {

      //display the menu to the user
      //check for invalid data types and error checking
      while (true){
        System.out.print("\n__________TMH DEALERSHIP PORTAL___________\n1. Toyota\n2. Mitsubishi\n3. Honda\n4. Exit\n\nEnter the # to view all cars for the company: ");
        try{
          //get the user's choice
          choice = input.nextInt();
          break;
        }
        //try, catch to catch a String value entered for an int
        catch (InputMismatchException e){
          System.out.println("\nBad data type\nPlease try again!");
          String flush = input.next();
        }
      }

      //error checking and invalid data input
      while (choice != 1 && choice != 2 && choice != 3 && choice != 4){
        System.out.println("\nInvalid Input!");
        while (true){
          System.out.print("\n__________TMH DEALERSHIP PORTAL___________\n1. Toyota\n2. Mitsubishi\n3. Honda\n4. Exit\n\nEnter the # to view all cars for the company: ");
          try{
            //get the user's choice
            choice = input.nextInt();
            break;
          }
          //try, catch to catch a String value entered for an int
          catch (InputMismatchException e){
            System.out.println("\nBad data type\nPlease try again!");
            String flush = input.next();
          }
        }
      }

      //if statements to output the cars based on the company
      if (choice == 1){
        //call the print function to print info about toyota
        t[0].print();
        //if the choice is 1, print out the toyota cars
        System.out.println("\n\n___TOYOTA CARS___");
        //for loop prints each of the cars details
        for (int i = 0; i < toyota; i ++){
          System.out.println("\n\nCar #" + (i+1) + "\nLocation: " + Car.location + "\nModel: " + t[i].getModel() + "\nPrice: " + money.format(t[i].getPrice()) + "\nWarranty: " + t[i].getWarranty() + " years\nColour: " + t[i].getColour() + "\nTrim: " + t[i].getTrim().toUpperCase());
        }
      }
      else if (choice == 2){
        //call the print function to print info about mitsubishi
        m[0].print();
        //if the choice is 2, print out the mitsubishi cars
        System.out.println("\n\n___MITSUBISHI ELECTRIC CARS___");
        //for loop prints each of the cars details
        for (int i = 0; i < mitsubishi; i ++){
          System.out.println("\n\nCar #" + (i+1) + "\nLocation: " + Car.location + "\nModel: " + m[i].getModel() + "\nPrice: " + money.format(m[i].getPrice()) + "\nWarranty: " + m[i].getWarranty() + " years\nColour: " + m[i].getColour() + "\nTrim: " + m[i].getTrim().toUpperCase());
        }
      }
      else if (choice == 3){
        //call the print function to print info about honda
        h[0].print();
        
        //if the choice is 3, print out the honda cars
        System.out.println("\n\n___HONDA CARS___");

        //for loop prints each of the cars details
        for (int i = 0; i < honda; i ++){
          System.out.println("\n\nCar #" + (i+1) + "\nLocation: " + Car.location + "\nModel: " + h[i].getModel() + "\nPrice: " + money.format(h[i].getPrice()) + "\nWarranty: " + h[i].getWarranty() + " years\nColour: " + h[i].getColour() + "\nTrim: " + h[i].getTrim().toUpperCase());
        }
      }


    } while (choice != 4);



  }
}


//create an abstract car parent class for the blueprint
//class gets the warranty, colour, model trim and an abstract method for price for each car
public abstract class Car{

  //member variables
  int warranty;
  String colour, model, trim;

  //static variable for the location
  static String location = "Beverly Hills";

  //default constructor
  public Car(){

  }

  //create an abstract method for setting the price
  public abstract void setPrice(double p);

  //mutator methods
  public void setWarranty(int w){
    warranty = w;
  }

  public void setColour(String c){
    colour = c;
  }

  public void setModel(String m){
    model = m;
  }

  public void setTrim(String t){
    trim = t;
  }

  //accessor methods
  public int getWarranty(){
    return warranty;
  }

  public String getColour(){
    return colour;
  }

  public String getModel(){
    return model;
  }

  public String getTrim(){
    return trim;
  }

  public abstract double getPrice();

}


//interface contains a method for each company to specify their fees
public interface Details{

  //abstract method will print info about each company's promotion or service fee
  public void print();

}


//subclass implements and extends from Details and Car respectivelyt//it contains constructors, discounts the car price and prints info about Honda
public class Honda extends Car implements Details{

  //price member variable
  double price;

  //default constructor
  public Honda(){

  }

  //overloaded constructor
  public Honda(int w, double p, String c, String m, String t){
    warranty = w;
    price = p;
    colour = c;
    model = m;
    trim = t;
  }

  //price mutator method
  public void setPrice(double p){
    price = p;
    //discount 9% for the winter sale
    price = price*(1-0.09);
  }

  //price accessor method
  public double getPrice(){
    return price;
  }

  public void print(){
    System.out.println("\nAt honda, you can now save even more with our HUGE offers! Buy or lease a Honda now and get 9% off the MSRP!");
  }

}


//subclass implements and extends from Details and Car respectively
//it contains constructors, adds a fee to the car price and prints info about Mitsubishi's delivery fee
public class Mitsubishi extends Car implements Details{

  //price variable
  double price;

  //default constructor
  public Mitsubishi(){

  }

  //overloaded constructor
  public Mitsubishi(int w, double p, String c, String m, String t){
    warranty = w;
    price = p;
    colour = c;
    model = m;
    trim = t;
  }

  //price mutator method
  public void setPrice(double p){
    price = p;
    //add a 3% delivery fee to the price
    price = price*1.03;
  }

  //price accessor method
  public double getPrice(){
    return price;
  }

  //override the print method in the interface
  public void print(){
    System.out.println("\nMitsubishi is a worldwide company now delivering cars to your door! Only pay a 3% delivery fee and get your car delivered today!");
  }


}


//subclass implements and extends from Details and Car respectively
//it contains constructors, discounts the car price and prints info about Toyota's red tag days
public class Toyota extends Car implements Details{

  //member variables
  double price;

  //default constructor
  public Toyota(){

  }

  //overloaded constructor
  public Toyota(int w, double p, String c, String m, String t){
    warranty = w;
    price = p;
    colour = c;
    model = m;
    trim = t;
  }

  //override the print method in the interface with info about Toyota
  public void print(){
    System.out.println("\nToyota red tag days are on now! Buy or lease a Toyota and get 11% off the final price!");
  }

  //price mutator method
  public void setPrice(double p){
    price = p;
    //reduce the set price by 11% for the toyota red tag days
    price = price*(1-0.11);
  }

  //price accessor method
  public double getPrice(){
    return price;
  }

}
